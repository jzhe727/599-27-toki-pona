# config_base_model.yaml


## Where the samples will be written
save_data: run

# Training files
data:
    corpus_1:
        path_src: src-train.txt
        path_tgt: tgt-train.txt
    valid:
        path_src: src-val.txt
        path_tgt: tgt-val.txt

# Vocabulary files, generated by onmt_build_vocab
src_vocab: src.vocab
tgt_vocab: tgt.vocab

# Vocabulary size - should be the same as in sentence piece
src_vocab_size: 50000
tgt_vocab_size: 50000

# Filter out source/target longer than n if [filtertoolong] enabled
src_seq_length: 150
src_seq_length: 150

# Tokenization options
src_subword_model: source.model
tgt_subword_model: target.model

# Where to save the log file and the output models/checkpoints
log_file: train.log
save_model: models_scratch/modelv1

# Stop training if it does not imporve after n validations
# early_stopping: 4

# Default: 5000 - Save a model checkpoint for each n
save_checkpoint_steps: 1000

# To save space, limit checkpoints to last n
# keep_checkpoint: 3

seed: 3435

# Default: 100000 - Train the model to max n steps
# Increase to 200000 or more for large datasets
# For fine-tuning, add up the required steps to the original steps
# decrease steps 
train_steps: 5000

# # Default: 10000 - Run validation after n steps
# # once every 78 
valid_steps: 500
valid_metrics: ["BLEU"]

# # Early Stop
# early_stopping: 10
# early_stopping_criteria: "accuracy"

# early_stopping:
#     # (optional) The target metric name (default: "loss").
#     metric: bleu
#     # (optional) The metric should improve at least by this much to be considered
#     # as an improvement (default: 0)
#     min_improvement: 0.01
#     steps: 10

# Default: 4000 - for large datasets, try up to 8000
warmup_steps: 1000
report_every: 100

# Number of GPUs, and IDs of GPUs
world_size: 1
gpu_ranks: [0]

# Batching
bucket_size: 17096 # whole corpus
num_workers: 8  # Default: 2, set to 0 when RAM out of memory
batch_type: "sents"
batch_size: 128   # Tokens per batch, change when CUDA out of memory
valid_batch_size: 2048
max_generator_batches: 2
accum_count: [4]
accum_steps: [0]

# Optimization
optim: "adam"
learning_rate: 2
decay_method: "noam"
adam_beta1: 0.9
adam_beta2: 0.998
max_grad_norm: 0
label_smoothing: 0.1
param_init: 0
param_init_glorot: true
normalization: "sents"

# Model
encoder_type: transformer
decoder_type: transformer
position_encoding: true
enc_layers: 2
dec_layers: 2
heads: 2
word_vec_size: 128
hidden_size: 128
transformer_ff: 512
dropout_steps: [0]
attention_dropout: [0.1]

